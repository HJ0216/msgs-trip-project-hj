{"ast":null,"code":"var _jsxFileName = \"C:\\\\MSGS\\\\MSGS\\\\src\\\\main\\\\webapp\\\\src\\\\pages\\\\tripschedule\\\\TripSchedule.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport { useLocation } from 'react-router-dom';\nimport { format } from 'date-fns';\nimport ReactHtmlParser from 'react-html-parser';\nimport axios from 'axios';\nimport style from './TripSchedule.module.css';\nimport DayPlan from '../../components/tripschedule/DayPlan';\nimport DayPlanEditMode from '../../components/tripschedule/DayPlanEditMode';\nimport Map from '../../components/tripschedule/Map';\nimport SelectedPlaceList from '../../components/tripschedule/SelectedPlaceList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function TripSchedule() {\n  _s();\n  const location = useLocation();\n  //1. 전 페이지에서 보낸 selectedCity, startDate, endDate를 받음.\n  // const startDate = location.state.startDate\n  // const endDate = location.state.endDate\n\n  const startDate = \"2023-06-23\";\n  const endDate = \"2023-07-01\";\n\n  //window가 로드 된 시점에서 <Map/> 랜더링 하기 위함\n  const [winReady, setWinReady] = useState(false);\n  const [dateList, setDateList] = useState([]);\n  /*편집모드 전환*/\n  const [editMode, setEditMode] = useState(false);\n  const [selectedDay, setSelectedDay] = useState(1);\n  const [selectedCity, setSelectedCity] = useState({\n    areaCode: 31,\n    sigunguCode: [1, 19],\n    areaTitle: '가평&#183;양평',\n    subTitle: '가평, 양평',\n    mapLat: 37.783248,\n    //위도\n    mapLon: 127.543837,\n    //경도\n    imageUrl: 'https://kr.object.ncloudstorage.com/msgs-file-server/cities-image/famous-city-gapeong.webp'\n  });\n  const [planList, planListHandler] = useState({});\n  console.log(selectedCity.areaTitle);\n  console.log('selectedCity시작' + selectedCity);\n  const [dormInfo, setDormInfo] = useState([]); //[{}, {}, {}]\n  const [placeInfo, setPlaceInfo] = useState([]); //[{}, {}, {}]\n\n  /*임시 데이터*/\n  //const dateList = ['2023.6.22', '2023.6.23', '2023.6.24']\n  const selectedCity1 = {\n    //areaId: 1,\n    areaCode: 31,\n    sigunguCode: [1, 19],\n    areaTitle: '가평&#183;양평',\n    subTitle: '가평, 양평',\n    mapLat: 37.783248,\n    //위도\n    mapLon: 127.543837,\n    //경도\n    imageUrl: 'https://kr.object.ncloudstorage.com/msgs-file-server/cities-image/famous-city-gapeong.webp'\n  };\n\n  //const dorm, touristSpot, restaurant\n  //selectedCity.subTitle, selectedCity.sigunguCode\n  const contentTypeId = {\n    32: '숙박',\n    12: '관광지',\n    39: '음식점'\n  };\n\n  //dateList 계산\n  const getDatesStartToEnd = (startDate, endDate) => {\n    console.log(startDate + '~' + endDate);\n    let result = [];\n    let curDate = new Date(startDate);\n    while (curDate <= new Date(endDate)) {\n      result.push(format(curDate, 'yyyy.MM.dd'));\n      curDate.setDate(curDate.getDate() + 1);\n    }\n    setDateList(result);\n  };\n  /*임시 데이터*/\n  //일정 블록들을 저장한 배열\n  //subtitle은 2개로 나뉠 듯. \n  //mapx, mapy 생김.\n  const planList1 = {\n    1: [\n    //DAY1\n    {\n      order: 1,\n      placeOrder: 1,\n      isChecked: false,\n      type: 'place',\n      title: '경포 해변1',\n      subtitle: '관광명소 · 강릉',\n      lat: 37.805214,\n      lng: 128.908346\n    }, {\n      order: 2,\n      placeOrder: 2,\n      isChecked: false,\n      type: 'place',\n      title: '경포 해변2',\n      subtitle: '관광명소 · 강릉',\n      lat: 37.796452,\n      lng: 128.917690\n    }, {\n      order: 3,\n      placeOrder: null,\n      isChecked: false,\n      type: 'dorm',\n      title: '조선 웨스턴 호텔',\n      subtitle: '숙소 · 강릉',\n      lat: 37.966109,\n      lng: 128.759825\n    }, {\n      order: 4,\n      placeOrder: null,\n      isChecked: false,\n      type: 'memo',\n      title: '중간에 야시장 갈 수 있음',\n      subtitle: null\n    }, {\n      order: 5,\n      placeOrder: 3,\n      isChecked: false,\n      type: 'place',\n      title: '에디슨 과학 박물관 ',\n      subtitle: '관광명소 · 강릉',\n      lat: 37.797028,\n      lng: 128.897320\n    }, {\n      order: 6,\n      placeOrder: 4,\n      isChecked: false,\n      type: 'place',\n      title: '참소리 축음기',\n      subtitle: '관광명소 · 강릉',\n      lat: 37.777144,\n      lng: 128.899846\n    }],\n    2: [\n    //DAY2\n    {\n      order: 1,\n      placeOrder: 1,\n      isChecked: false,\n      type: 'place',\n      title: '문릿',\n      subtitle: '음식점 · 양평'\n    }, {\n      order: 2,\n      placeOrder: 2,\n      isChecked: false,\n      type: 'place',\n      title: '양평 두물머리',\n      subtitle: '관광지 · 양평'\n    }, {\n      order: 3,\n      placeOrder: null,\n      isChecked: false,\n      type: 'dorm',\n      title: '한옥마을 황토펜션',\n      subtitle: '숙소 · 양평'\n    }, {\n      order: 4,\n      placeOrder: null,\n      isChecked: false,\n      type: 'memo',\n      title: '배고프면 간식 사먹자',\n      subtitle: null\n    }, {\n      order: 5,\n      placeOrder: 3,\n      isChecked: false,\n      type: 'place',\n      title: 'C아트뮤지엄(숲속의 미술공원) ',\n      subtitle: '문화시설 · 양평'\n    }, {\n      order: 6,\n      placeOrder: null,\n      isChecked: false,\n      type: 'memo',\n      title: '숙소에 21시쯤 도착',\n      subtitle: 'null'\n    }]\n  };\n  useEffect(() => {\n    /*모달창에 띄울 쓸 숙박, 장소 item들 정보 받아옴*/\n    // selectedCity['sigunguCode']?.map((sigunguCode) => {\n    // [1, 19].map((sigunguCode) => {\n    axios.get(\n    //숙박\n    '/tripschedule/dormInfo' + {\n      params: {\n        areaCode: selectedCity === null || selectedCity === void 0 ? void 0 : selectedCity.areaCode,\n        //Ex.32\n        sigunguCodeList: selectedCity === null || selectedCity === void 0 ? void 0 : selectedCity.sigunguCode.join(',') // Ex. [1, 5, 7]\n      }\n    }).then(function (response) {\n      setDormInfo(response.data);\n      console.log(\"dormInfo 성공\");\n    }).catch(function (error) {\n      console.log(\"dormInfo 실패\", error);\n    });\n    axios.get(\n    //Place(관광지, 음식점)\n    '/tripschedule/placeInfo' + {\n      params: {\n        areaCode: selectedCity === null || selectedCity === void 0 ? void 0 : selectedCity.areaCode,\n        sigunguCodeList: selectedCity === null || selectedCity === void 0 ? void 0 : selectedCity.sigunguCode.join(',')\n      }\n    }).then(function (response) {\n      setPlaceInfo(response.data);\n      console.log('placeInfo 성공');\n    }).catch(function (error) {\n      console.log('placeInfo 실패', error);\n    });\n    // })\n  }, [selectedCity]);\n  useEffect(() => {\n    setWinReady(true);\n    //1. 전 페이지에서 도시 이름, 지역코드 받아서 state에 저장. (Object형)\n    // setSelectedCity(location.state.selectedCity)\n    setSelectedCity({\n      //areaId: 1,\n      areaCode: 31,\n      sigunguCode: [1, 19],\n      areaTitle: '가평&#183;양평',\n      subTitle: '가평, 양평',\n      mapLat: 37.783248,\n      //위도\n      mapLon: 127.543837,\n      //경도\n      imageUrl: 'https://kr.object.ncloudstorage.com/msgs-file-server/cities-image/famous-city-gapeong.webp'\n    });\n\n    // 2. schedule2에서 보낸 startDate와 endDate가지고 dateList 만들음.\n    getDatesStartToEnd(startDate, endDate);\n\n    // 3. dateList에 따라 planList = {1: [{}, {}, {}, {}], 2: [], 3: []} 식으로 초기화 한다.\n    let initObj = {};\n    console.log(dateList);\n    dateList === null || dateList === void 0 ? void 0 : dateList.map((_, index) => {\n      initObj[index + 1] = [];\n    });\n    console.log(initObj);\n    planListHandler(initObj);\n  }, [winReady]);\n\n  // ---------- selectedDay Handler 정의 ----------\n  const selectedDayChangeHandler = data => {\n    setSelectedDay(data);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: style['container'],\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: style['sidebar'],\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: style['sidebar-title'],\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: style['trip-title'],\n          children: [ReactHtmlParser(selectedCity.areaTitle), \" \\uC5EC\\uD589\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: style['travel-period'],\n          children: dateList[0] + '~' + dateList[dateList.length - 1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 16\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Scrollbars, {\n        style: {\n          height: '100%',\n          width: '100%'\n        },\n        thumbSize: 120,\n        autoHide: true,\n        autoHideTimeout: 1000,\n        autoHideDuration: 1000,\n        renderTrackHorizontal: props => /*#__PURE__*/_jsxDEV(\"div\", {\n          ...props,\n          className: style['track-horizontal']\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 50\n        }, this),\n        renderThumbHorizontal: props => /*#__PURE__*/_jsxDEV(\"div\", {\n          ...props,\n          className: style['thumb-horizontal']\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 50\n        }, this),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: style['dayplan-wrapper'],\n          children: editMode ? //편집모드인 경우\n          dateList === null || dateList === void 0 ? void 0 : dateList.map((item, index) => /*#__PURE__*/_jsxDEV(DayPlanEditMode, {\n            orderDay: index + 1,\n            date: item,\n            planList: planList,\n            planListHandler: planListHandler,\n            setEditMode: setEditMode\n          }, index + 1, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 28\n          }, this)) : //편집모드가 아닌 경우\n          dateList === null || dateList === void 0 ? void 0 : dateList.map((item, index) => /*#__PURE__*/_jsxDEV(DayPlan, {\n            orderDay: index + 1,\n            date: item,\n            planList: planList,\n            planListHandler: planListHandler,\n            setEditMode: setEditMode,\n            selectedCity: selectedCity\n          }, index + 1, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 28\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 16\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: style['map'],\n      children: winReady && Object.keys(planList).length > 0 ? /*#__PURE__*/_jsxDEV(Map, {\n        planList: planList1,\n        selectedCity: selectedCity,\n        selectedDay: selectedDay\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 16\n      }, this) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(SelectedPlaceList, {\n      planList: planList,\n      selectedDay: selectedDay,\n      setSelectedDay: setSelectedDay\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 210,\n    columnNumber: 7\n  }, this);\n}\n_s(TripSchedule, \"7CBOu/DWr9lVQ4bDfA5i7BXUt+8=\", false, function () {\n  return [useLocation];\n});\n_c = TripSchedule;\nvar _c;\n$RefreshReg$(_c, \"TripSchedule\");","map":{"version":3,"names":["React","useState","useEffect","Scrollbars","useLocation","format","ReactHtmlParser","axios","style","DayPlan","DayPlanEditMode","Map","SelectedPlaceList","jsxDEV","_jsxDEV","TripSchedule","_s","location","startDate","endDate","winReady","setWinReady","dateList","setDateList","editMode","setEditMode","selectedDay","setSelectedDay","selectedCity","setSelectedCity","areaCode","sigunguCode","areaTitle","subTitle","mapLat","mapLon","imageUrl","planList","planListHandler","console","log","dormInfo","setDormInfo","placeInfo","setPlaceInfo","selectedCity1","contentTypeId","getDatesStartToEnd","result","curDate","Date","push","setDate","getDate","planList1","order","placeOrder","isChecked","type","title","subtitle","lat","lng","get","params","sigunguCodeList","join","then","response","data","catch","error","initObj","map","_","index","selectedDayChangeHandler","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","height","width","thumbSize","autoHide","autoHideTimeout","autoHideDuration","renderTrackHorizontal","props","renderThumbHorizontal","item","orderDay","date","Object","keys","_c","$RefreshReg$"],"sources":["C:/MSGS/MSGS/src/main/webapp/src/pages/tripschedule/TripSchedule.js"],"sourcesContent":["import React, { useState, useEffect} from 'react'\r\nimport { Scrollbars } from 'react-custom-scrollbars'\r\nimport { useLocation } from 'react-router-dom'\r\nimport { format } from 'date-fns'\r\nimport ReactHtmlParser from 'react-html-parser'\r\nimport axios from 'axios'\r\n\r\nimport style from './TripSchedule.module.css'\r\n\r\nimport DayPlan from '../../components/tripschedule/DayPlan'\r\nimport DayPlanEditMode from '../../components/tripschedule/DayPlanEditMode'\r\nimport Map from '../../components/tripschedule/Map'\r\nimport SelectedPlaceList from '../../components/tripschedule/SelectedPlaceList'\r\n\r\nexport default function TripSchedule() {\r\n   const location = useLocation()\r\n   //1. 전 페이지에서 보낸 selectedCity, startDate, endDate를 받음.\r\n   // const startDate = location.state.startDate\r\n   // const endDate = location.state.endDate\r\n\r\n   const startDate = \"2023-06-23\"\r\n   const endDate = \"2023-07-01\"\r\n\r\n\r\n   //window가 로드 된 시점에서 <Map/> 랜더링 하기 위함\r\n   const [winReady, setWinReady] = useState(false)\r\n   const [dateList, setDateList] = useState([])\r\n   /*편집모드 전환*/\r\n   const [editMode, setEditMode] = useState(false)\r\n   const [selectedDay, setSelectedDay] = useState(1)\r\n   const [selectedCity, setSelectedCity] = useState({\r\n      areaCode: 31,\r\n      sigunguCode: [1, 19],\r\n      areaTitle: '가평&#183;양평',\r\n      subTitle: '가평, 양평',\r\n      mapLat: 37.783248, //위도\r\n      mapLon: 127.543837, //경도\r\n      imageUrl: 'https://kr.object.ncloudstorage.com/msgs-file-server/cities-image/famous-city-gapeong.webp',\r\n   })\r\n   const [planList, planListHandler] = useState({})\r\n   console.log(selectedCity.areaTitle)\r\n   console.log('selectedCity시작' + selectedCity)\r\n\r\n   const [dormInfo, setDormInfo] = useState([]) //[{}, {}, {}]\r\n   const [placeInfo, setPlaceInfo] = useState([]) //[{}, {}, {}]\r\n\r\n   /*임시 데이터*/\r\n   //const dateList = ['2023.6.22', '2023.6.23', '2023.6.24']\r\n   const selectedCity1 = {\r\n      //areaId: 1,\r\n      areaCode: 31,\r\n      sigunguCode: [1, 19],\r\n      areaTitle: '가평&#183;양평',\r\n      subTitle: '가평, 양평',\r\n      mapLat: 37.783248, //위도\r\n      mapLon: 127.543837, //경도\r\n      imageUrl: 'https://kr.object.ncloudstorage.com/msgs-file-server/cities-image/famous-city-gapeong.webp',\r\n   }\r\n\r\n   //const dorm, touristSpot, restaurant\r\n   //selectedCity.subTitle, selectedCity.sigunguCode\r\n   const contentTypeId = { 32: '숙박', 12: '관광지', 39: '음식점' }\r\n\r\n   //dateList 계산\r\n   const getDatesStartToEnd = (startDate, endDate) => {\r\n      console.log(startDate + '~' + endDate)\r\n\r\n      let result = []\r\n      let curDate = new Date(startDate)\r\n      while (curDate <= new Date(endDate)) {\r\n         result.push(format(curDate, 'yyyy.MM.dd'))\r\n         curDate.setDate(curDate.getDate() + 1)\r\n      }\r\n      setDateList(result)\r\n   }\r\n   /*임시 데이터*/\r\n   //일정 블록들을 저장한 배열\r\n   //subtitle은 2개로 나뉠 듯. \r\n   //mapx, mapy 생김.\r\n   const planList1 = {\r\n      1: [\r\n         //DAY1\r\n         { order: 1, placeOrder: 1, isChecked: false, type: 'place', title: '경포 해변1', subtitle: '관광명소 · 강릉', lat: 37.805214, lng: 128.908346, },\r\n         { order: 2, placeOrder: 2, isChecked: false, type: 'place', title: '경포 해변2', subtitle: '관광명소 · 강릉', lat: 37.796452, lng: 128.917690, },\r\n         {\r\n            order: 3,\r\n            placeOrder: null,\r\n            isChecked: false,\r\n            type: 'dorm',\r\n            title: '조선 웨스턴 호텔',\r\n            subtitle: '숙소 · 강릉',\r\n\t\t\tlat: 37.966109, \r\n\t\t\tlng: 128.759825,\r\n         },\r\n         { order: 4, placeOrder: null, isChecked: false, type: 'memo', title: '중간에 야시장 갈 수 있음', subtitle: null },\r\n         {\r\n            order: 5,\r\n            placeOrder: 3,\r\n            isChecked: false,\r\n            type: 'place',\r\n            title: '에디슨 과학 박물관 ',\r\n            subtitle: '관광명소 · 강릉',\r\n\t\t\tlat: 37.797028,\r\n        \tlng: 128.897320,\r\n         },\r\n         { order: 6, placeOrder: 4, isChecked: false, type: 'place', title: '참소리 축음기', subtitle: '관광명소 · 강릉', lat: 37.777144, lng: 128.899846, },\r\n      ],\r\n      2: [\r\n         //DAY2\r\n         { order: 1, placeOrder: 1, isChecked: false, type: 'place', title: '문릿', subtitle: '음식점 · 양평' },\r\n         { order: 2, placeOrder: 2, isChecked: false, type: 'place', title: '양평 두물머리', subtitle: '관광지 · 양평' },\r\n         {\r\n            order: 3,\r\n            placeOrder: null,\r\n            isChecked: false,\r\n            type: 'dorm',\r\n            title: '한옥마을 황토펜션',\r\n            subtitle: '숙소 · 양평',\r\n         },\r\n         { order: 4, placeOrder: null, isChecked: false, type: 'memo', title: '배고프면 간식 사먹자', subtitle: null },\r\n         {\r\n            order: 5,\r\n            placeOrder: 3,\r\n            isChecked: false,\r\n            type: 'place',\r\n            title: 'C아트뮤지엄(숲속의 미술공원) ',\r\n            subtitle: '문화시설 · 양평',\r\n         },\r\n         { order: 6, placeOrder: null, isChecked: false, type: 'memo', title: '숙소에 21시쯤 도착', subtitle: 'null' },\r\n      ],\r\n   }\r\n\r\n   useEffect(() => {\r\n      /*모달창에 띄울 쓸 숙박, 장소 item들 정보 받아옴*/\r\n      // selectedCity['sigunguCode']?.map((sigunguCode) => {\r\n         // [1, 19].map((sigunguCode) => {\r\n               axios.get( //숙박\r\n                     '/tripschedule/dormInfo' +\r\n                     {\r\n                        params: {\r\n                           areaCode: selectedCity?.areaCode, //Ex.32\r\n                           sigunguCodeList: selectedCity?.sigunguCode.join(','), // Ex. [1, 5, 7]\r\n                        },\r\n                     }\r\n               ).then(function(response) {\r\n                  setDormInfo(response.data);\r\n                  console.log(\"dormInfo 성공\");\r\n               })\r\n               .catch(function(error) {\r\n                  console.log(\"dormInfo 실패\", error);\r\n               })\r\n\r\n               axios\r\n                  .get(\r\n                     //Place(관광지, 음식점)\r\n                     '/tripschedule/placeInfo' +\r\n                        {\r\n                           params: {\r\n                              areaCode: selectedCity?.areaCode,\r\n                              sigunguCodeList: selectedCity?.sigunguCode.join(','),\r\n                           },\r\n                        }\r\n                  )\r\n                  .then(function (response) {\r\n                     setPlaceInfo(response.data)\r\n                     console.log('placeInfo 성공')\r\n                  })\r\n                  .catch(function (error) {\r\n                     console.log('placeInfo 실패', error)\r\n                  })\r\n      // })\r\n   }, [selectedCity])\r\n\r\n   useEffect(() => {\r\n      setWinReady(true)\r\n      //1. 전 페이지에서 도시 이름, 지역코드 받아서 state에 저장. (Object형)\r\n      // setSelectedCity(location.state.selectedCity)\r\n      setSelectedCity({\r\n         //areaId: 1,\r\n         areaCode: 31,\r\n         sigunguCode: [1, 19],\r\n         areaTitle: '가평&#183;양평',\r\n         subTitle: '가평, 양평',\r\n         mapLat: 37.783248, //위도\r\n         mapLon: 127.543837, //경도\r\n         imageUrl: 'https://kr.object.ncloudstorage.com/msgs-file-server/cities-image/famous-city-gapeong.webp',\r\n      })\r\n\r\n      // 2. schedule2에서 보낸 startDate와 endDate가지고 dateList 만들음.\r\n      getDatesStartToEnd(startDate, endDate)\r\n\r\n      // 3. dateList에 따라 planList = {1: [{}, {}, {}, {}], 2: [], 3: []} 식으로 초기화 한다.\r\n      let initObj = {}\r\n      console.log(dateList)\r\n      dateList?.map((_, index) => {\r\n         initObj[index + 1] = []\r\n      })\r\n      console.log(initObj)\r\n      planListHandler(initObj)\r\n   }, [winReady])\r\n\r\n\r\n   // ---------- selectedDay Handler 정의 ----------\r\n   const selectedDayChangeHandler = (data) => {\r\n\tsetSelectedDay(data);\r\n   }\r\n   \r\n\r\n   return (\r\n      <div className={style['container']}>\r\n         {/* 사이드바 */}\r\n         <div className={style['sidebar']}>\r\n            <div className={style['sidebar-title']}>\r\n               <p className={style['trip-title']}>{ReactHtmlParser(selectedCity.areaTitle)} 여행</p>\r\n               <p className={style['travel-period']}>{dateList[0] + '~' + dateList[dateList.length - 1]}</p>\r\n            </div>\r\n            <Scrollbars\r\n               style={{ height: '100%', width: '100%' }}\r\n               thumbSize={120}\r\n               autoHide\r\n               autoHideTimeout={1000}\r\n               autoHideDuration={1000}\r\n               renderTrackHorizontal={(props) => <div {...props} className={style['track-horizontal']} />}\r\n               renderThumbHorizontal={(props) => <div {...props} className={style['thumb-horizontal']} />}>\r\n               {/* Day1, 2, 3... 블록 */}\r\n               <div className={style['dayplan-wrapper']}>\r\n                  {editMode\r\n                     ? //편집모드인 경우\r\n                       dateList?.map((item, index) => (\r\n                           <DayPlanEditMode\r\n                              key={index + 1}\r\n                              orderDay={index + 1}\r\n                              date={item}\r\n                              planList={planList}\r\n                              planListHandler={planListHandler}\r\n                              setEditMode={setEditMode}\r\n                           />\r\n                       ))\r\n                     : //편집모드가 아닌 경우\r\n                       dateList?.map((item, index) => (\r\n                           <DayPlan\r\n                              key={index + 1}\r\n                              orderDay={index + 1}\r\n                              date={item}\r\n                              planList={planList}\r\n                              planListHandler={planListHandler}\r\n                              setEditMode={setEditMode}\r\n                              selectedCity={selectedCity}\r\n                           />\r\n                       ))}\r\n               </div>\r\n            </Scrollbars>\r\n         </div>\r\n\r\n         {/* 구글맵 */}\r\n         <div className={style['map']}>\r\n            {/* //window가 로드 된 시점에서 google map을 렌더링함. */}\r\n            {/* selectedCity.mapLat, selectedCity.mapLon */}\r\n            {winReady && Object.keys(planList).length > 0 ? (\r\n               <Map planList={planList1} selectedCity={selectedCity} selectedDay={selectedDay} />\r\n            ) : null}\r\n         </div>\r\n\r\n         {/* 선택한 장소 목록*/}\r\n         <SelectedPlaceList planList={planList} selectedDay={selectedDay} setSelectedDay={setSelectedDay} />\r\n      </div>\r\n   )\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}