plugins { // 남이 미리 만들어둔 task의 집합
    id 'java'
    id 'org.springframework.boot' version '3.1.0'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'com.github.node-gradle.node' version '4.0.0'
    id "org.sonarqube" version "5.0.0.4638"
    id 'jacoco'
    id "org.asciidoctor.jvm.convert" version "3.3.2"
    // Spring restdocs가 만들어낸 snippet을 html이나 pdf형식으로 만들어주는 오픈소스
}

// 프로젝트 기본 정보
group = 'com.msgs'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    asciidoctorExt // asciidoctorExt에 대한 종속성 구성 선언
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'


    // JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'com.vladmihalcea:hibernate-types-60:2.20.0'


    // AWS
    implementation 'com.amazonaws:aws-java-sdk-s3:1.12.238'
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.5.RELEASE'


    // security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.security:spring-security-config'
    testImplementation 'org.springframework.security:spring-security-test'


    // jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'


    // redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'


    // Spring REST Docs
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    // Spring REST Docs로 생성된 AsciiDoc 형식의 문서를 최종적으로 HTML이나 PDF 같은 문서 파일로 변환하기 위해 사용되는 라이브러리
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    // MockMvc를 사용한 테스트에서 API 문서를 생성할 때 사용
    // MockMvc: Spring MVC 애플리케이션을 실제 서버 없이 테스트할 수 있게 해주는 도구
    testImplementation 'org.springframework.restdocs:spring-restdocs-restassured'
    // REST Assured를 사용한 API 테스트에서 문서를 생성할 때 사용
    // REST Assured: REST API를 테스트하기 위해 자주 사용되는 라이브러리, HTTP 요청 및 응답을 간단하게 작성하고 확인할 수 있음
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'
    // Java에서 JSON 데이터를 간단하게 다루기 위한 경량 라이브러리


    // Database
    runtimeOnly 'com.mysql:mysql-connector-j'


    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"


    // Utilities
    developmentOnly 'org.springframework.boot:spring-boot-devtools:3.0.4'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.json:json:20230227'
    implementation 'commons-io:commons-io:2.11.0'


    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'


//  NCP SMS API
//    implementation 'org.apache.httpcomponents:httpclient:4.5.13'
//    implementation 'com.google.code.gson:gson:2.8.5'
//    implementation 'net.sf.json-lib:json-lib:2.4:jdk15'
    implementation 'com.google.code.gson:gson:2.8.7'

    // chat bot
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework:spring-messaging:5.3.9'
}

jacoco {
    toolVersion = "0.8.8"
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.enabled true
        html.outputLocation = layout.buildDirectory.dir('reports/jacoco/html')
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/Application.class', '**/dto/*.class'])
        }))
    }
    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = 'CLASS'

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.00
            }

            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.00
            }
        }
    }
}


ext { // project 객체에서 사용할 custom extra property를 설정하는 코드블록, 블록 내에 설정한 변수는 스크립트 내에서 활용할 수 있음
    snippetsDir = file('build/generated-snippets') // File객체를 할당
}

test {
    useJUnitPlatform() // junit테스트를 수행
    outputs.dir snippetsDir
    // test task의 outputs directory를 snippetdir로 지정
    // asciidoc converting 결과가 저장되는 공간
    finalizedBy 'jacocoTestReport'
}

def frontendDir = "$projectDir/src/main/webapp"

sourceSets {
    main {
        resources {
            srcDirs = ["$projectDir/src/main/resources"]
        }
    }
}

//processResources { // 프로젝트의 리소스 파일들을 처리(복사 또는 변환)하는 역할
//    dependsOn "copyReactBuildFiles"
//}
//
//task installReact(type: Exec) {
//    workingDir "$frontendDir"
//    inputs.dir "$frontendDir"
//    group = BasePlugin.BUILD_GROUP
//    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
//        commandLine "npm.cmd", "audit", "fix"
//        commandLine 'npm.cmd', 'install', "--legacy-peer-deps"
//    } else {
//        commandLine "npm", "audit", "fix"
//        commandLine 'npm', 'install', "--legacy-peer-deps"
//    }
//}
//
//task buildReact(type: Exec) {
//    dependsOn "installReact"
//    workingDir "$frontendDir"
//    inputs.dir "$frontendDir"
//    group = BasePlugin.BUILD_GROUP
//    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
//        commandLine "npm.cmd", "run-script", "build"
//    } else {
//        commandLine "npm", "run-script", "build"
//    }
//}
//
//task copyReactBuildFiles(type: Copy) {
//    dependsOn "buildReact"
//    from "$frontendDir/build"
//    into "$buildDir/resources/main/static"
//}


asciidoctor { // asciidoctor 테스크 설정
    inputs.dir snippetsDir
    // asciidoctor가 converting을 수행하기 위한 snippet의 경로를 input.dir로 지정
    configurations 'asciidoctorExt'
    // asciidoctor 작업에 대해 추가적인 설정을 적용하기 위해 사용되는 설정
    // Spring REST Docs가 테스트를 통해 생성한 스니펫을 가져와, Asciidoctor가 문서로 변환할 수 있도록 함
    dependsOn test
    // test 테스크가 먼저 실행된 후에 asciidoctor 테스크가 실행되도록 하여,
    // 테스트가 완료된 후 생성된 스니펫을 사용해 API 문서를 빌드할 수 있도록 보장
}

task copyDocument(type: Copy) {
    // 배포용 Jar파일을 생성하기 전 resources/static/docs에 asciidoctor 결과를 복사하기 위한 task
    dependsOn asciidoctor
    from file("build/docs/asciidoc")
    // resources/static/docs로 복사하여 서버가 돌아가고 있을때 /docs/index.html로 접속하면 볼수 있음
    into file("src/main/resources/static/docs")
}

build {
    dependsOn copyDocument
}

bootJar { // 배포용 Jar 파일을 만들 때 asciidoctor가 생성한 html파일을 포함시키기 위한 설정
    dependsOn asciidoctor
    from("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}